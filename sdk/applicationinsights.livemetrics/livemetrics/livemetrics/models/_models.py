# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import DocumentType

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CollectionConfigurationError(_model_base.Model):
    """Represents an error while SDK parses and applies an instance of CollectionConfigurationInfo.

    All required parameters must be populated in order to send to server.

    :ivar collection_configuration_error_type: Error type. Required. Known values are: "Unknown",
     "PerformanceCounterParsing", "PerformanceCounterUnexpected", "PerformanceCounterDuplicateIds",
     "DocumentStreamDuplicateIds", "DocumentStreamFailureToCreate",
     "DocumentStreamFailureToCreateFilterUnexpected", "MetricDuplicateIds",
     "MetricTelemetryTypeUnsupported", "MetricFailureToCreate",
     "MetricFailureToCreateFilterUnexpected", "FilterFailureToCreateUnexpected", and
     "CollectionConfigurationFailureToCreateUnexpected".
    :vartype collection_configuration_error_type: str or
     ~livemetrics.models.CollectionConfigurationErrorType
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar full_exception: Exception that led to the creation of the configuration error. Required.
    :vartype full_exception: str
    :ivar data: Custom properties to add more information to the error. Required.
    :vartype data: list[~livemetrics.models.KeyValuePairStringString]
    """

    collection_configuration_error_type: Union[str, "_models.CollectionConfigurationErrorType"] = rest_field(
        name="CollectionConfigurationErrorType"
    )
    """Error type. Required. Known values are: \"Unknown\", \"PerformanceCounterParsing\",
     \"PerformanceCounterUnexpected\", \"PerformanceCounterDuplicateIds\",
     \"DocumentStreamDuplicateIds\", \"DocumentStreamFailureToCreate\",
     \"DocumentStreamFailureToCreateFilterUnexpected\", \"MetricDuplicateIds\",
     \"MetricTelemetryTypeUnsupported\", \"MetricFailureToCreate\",
     \"MetricFailureToCreateFilterUnexpected\", \"FilterFailureToCreateUnexpected\", and
     \"CollectionConfigurationFailureToCreateUnexpected\"."""
    message: str = rest_field(name="Message")
    """Error message. Required."""
    full_exception: str = rest_field(name="FullException")
    """Exception that led to the creation of the configuration error. Required."""
    data: List["_models.KeyValuePairStringString"] = rest_field(name="Data")
    """Custom properties to add more information to the error. Required."""

    @overload
    def __init__(
        self,
        *,
        collection_configuration_error_type: Union[str, "_models.CollectionConfigurationErrorType"],
        message: str,
        full_exception: str,
        data: List["_models.KeyValuePairStringString"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CollectionConfigurationInfo(_model_base.Model):
    """Represents the collection configuration - a customizable description of performance counters,
    metrics, and full telemetry documents to be collected by the client SDK.

    All required parameters must be populated in order to send to server.

    :ivar e_tag: An encoded string that indicates whether the collection configuration is changed.
     Required.
    :vartype e_tag: str
    :ivar metrics: An array of metric configuration info. Required.
    :vartype metrics: list[~livemetrics.models.DerivedMetricInfo]
    :ivar document_streams: An array of document stream configuration info. Required.
    :vartype document_streams: list[~livemetrics.models.DocumentStreamInfo]
    :ivar quota_info: Controls document quotas to be sent to Live Metrics.
    :vartype quota_info: ~livemetrics.models.QuotaConfigurationInfo
    """

    e_tag: str = rest_field(name="ETag")
    """An encoded string that indicates whether the collection configuration is changed. Required."""
    metrics: List["_models.DerivedMetricInfo"] = rest_field(name="Metrics")
    """An array of metric configuration info. Required."""
    document_streams: List["_models.DocumentStreamInfo"] = rest_field(name="DocumentStreams")
    """An array of document stream configuration info. Required."""
    quota_info: Optional["_models.QuotaConfigurationInfo"] = rest_field(name="QuotaInfo")
    """Controls document quotas to be sent to Live Metrics."""

    @overload
    def __init__(
        self,
        *,
        e_tag: str,
        metrics: List["_models.DerivedMetricInfo"],
        document_streams: List["_models.DocumentStreamInfo"],
        quota_info: Optional["_models.QuotaConfigurationInfo"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DerivedMetricInfo(_model_base.Model):
    """A metric configuration set by UX to scope the metrics it's interested in.

    All required parameters must be populated in order to send to server.

    :ivar id: metric configuration identifier. Required.
    :vartype id: str
    :ivar telemetry_type: Telemetry type. Required.
    :vartype telemetry_type: str
    :ivar filter_groups: A collection of filters to scope metrics that UX needs. Required.
    :vartype filter_groups: list[~livemetrics.models.FilterConjunctionGroupInfo]
    :ivar projection: Telemetry's metric dimension whose value is to be aggregated. Example values:
     Duration, Count(),... Required.
    :vartype projection: str
    :ivar aggregation: Aggregation type. This is the aggregation done from everything within a
     single server. Required. Known values are: "Avg", "Sum", "Min", and "Max".
    :vartype aggregation: str or ~livemetrics.models.AggregationType
    :ivar back_end_aggregation: Aggregation type. This Aggregation is done across the values for
     all the servers taken together. Required. Known values are: "Avg", "Sum", "Min", and "Max".
    :vartype back_end_aggregation: str or ~livemetrics.models.AggregationType
    """

    id: str = rest_field(name="Id")
    """metric configuration identifier. Required."""
    telemetry_type: str = rest_field(name="TelemetryType")
    """Telemetry type. Required."""
    filter_groups: List["_models.FilterConjunctionGroupInfo"] = rest_field(name="FilterGroups")
    """A collection of filters to scope metrics that UX needs. Required."""
    projection: str = rest_field(name="Projection")
    """Telemetry's metric dimension whose value is to be aggregated. Example values: Duration,
     Count(),... Required."""
    aggregation: Union[str, "_models.AggregationType"] = rest_field(name="Aggregation")
    """Aggregation type. This is the aggregation done from everything within a single server.
     Required. Known values are: \"Avg\", \"Sum\", \"Min\", and \"Max\"."""
    back_end_aggregation: Union[str, "_models.AggregationType"] = rest_field(name="BackEndAggregation")
    """Aggregation type. This Aggregation is done across the values for all the servers taken
     together. Required. Known values are: \"Avg\", \"Sum\", \"Min\", and \"Max\"."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        telemetry_type: str,
        filter_groups: List["_models.FilterConjunctionGroupInfo"],
        projection: str,
        aggregation: Union[str, "_models.AggregationType"],
        back_end_aggregation: Union[str, "_models.AggregationType"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentFilterConjunctionGroupInfo(_model_base.Model):
    """A collection of filters for a specific telemetry type.

    All required parameters must be populated in order to send to server.

    :ivar telemetry_type: Telemetry type. Required. Known values are: "Request", "Dependency",
     "Exception", "Event", "Metric", "PerformanceCounter", and "Trace".
    :vartype telemetry_type: str or ~livemetrics.models.TelemetryType
    :ivar filters: An array of filter groups. Required.
    :vartype filters: ~livemetrics.models.FilterConjunctionGroupInfo
    """

    telemetry_type: Union[str, "_models.TelemetryType"] = rest_field(name="TelemetryType")
    """Telemetry type. Required. Known values are: \"Request\", \"Dependency\", \"Exception\",
     \"Event\", \"Metric\", \"PerformanceCounter\", and \"Trace\"."""
    filters: "_models.FilterConjunctionGroupInfo" = rest_field(name="Filters")
    """An array of filter groups. Required."""

    @overload
    def __init__(
        self,
        *,
        telemetry_type: Union[str, "_models.TelemetryType"],
        filters: "_models.FilterConjunctionGroupInfo",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentIngress(_model_base.Model):
    """Base class of the specific document types.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Event, Exception, RemoteDependency, Request, Trace

    All required parameters must be populated in order to send to server.

    :ivar document_type: Telemetry type. Types not defined in enum will get replaced with a
     'Unknown' type. Required. Known values are: "Request", "RemoteDependency", "Exception",
     "Event", "Trace", and "Unknown".
    :vartype document_type: str or ~livemetrics.models.DocumentType
    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    document_type: str = rest_discriminator(name="DocumentType")
    """Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type. Required.
     Known values are: \"Request\", \"RemoteDependency\", \"Exception\", \"Event\", \"Trace\", and
     \"Unknown\"."""
    document_stream_ids: Optional[List[str]] = rest_field(name="DocumentStreamIds")
    """An array of document streaming ids. Each id identifies a flow of documents customized by UX
     customers."""
    properties: Optional[List["_models.KeyValuePairStringString"]] = rest_field(name="Properties")
    """Collection of custom properties."""

    @overload
    def __init__(
        self,
        *,
        document_type: str,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentStreamInfo(_model_base.Model):
    """Configurations/filters set by UX to scope the document/telemetry it's interested in.

    All required parameters must be populated in order to send to server.

    :ivar id: Identifier of the document stream initiated by a UX. Required.
    :vartype id: str
    :ivar document_filter_groups: Gets or sets an OR-connected collection of filter groups.
     Required.
    :vartype document_filter_groups: list[~livemetrics.models.DocumentFilterConjunctionGroupInfo]
    """

    id: str = rest_field(name="Id")
    """Identifier of the document stream initiated by a UX. Required."""
    document_filter_groups: List["_models.DocumentFilterConjunctionGroupInfo"] = rest_field(name="DocumentFilterGroups")
    """Gets or sets an OR-connected collection of filter groups. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        document_filter_groups: List["_models.DocumentFilterConjunctionGroupInfo"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Event(DocumentIngress, discriminator="Event"):
    """Event document type.

    All required parameters must be populated in order to send to server.

    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    :ivar document_type: Telemetry type for Event. Required. Represents an event telemetry type.
    :vartype document_type: str or ~livemetrics.models.EVENT
    :ivar name: Event name.
    :vartype name: str
    """

    document_type: Literal[DocumentType.EVENT] = rest_discriminator(name="DocumentType")  # type: ignore
    """Telemetry type for Event. Required. Represents an event telemetry type."""
    name: Optional[str] = rest_field(name="Name")
    """Event name."""

    @overload
    def __init__(
        self,
        *,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
        name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, document_type=DocumentType.EVENT, **kwargs)


class Exception(DocumentIngress, discriminator="Exception"):
    """Exception document type.

    All required parameters must be populated in order to send to server.

    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    :ivar document_type: Telemetry type for Exception. Required. Represents an exception telemetry
     type.
    :vartype document_type: str or ~livemetrics.models.EXCEPTION
    :ivar exception_type: Exception type name.
    :vartype exception_type: str
    :ivar exception_message: Exception message.
    :vartype exception_message: str
    """

    document_type: Literal[DocumentType.EXCEPTION] = rest_discriminator(name="DocumentType")  # type: ignore
    """Telemetry type for Exception. Required. Represents an exception telemetry type."""
    exception_type: Optional[str] = rest_field(name="ExceptionType")
    """Exception type name."""
    exception_message: Optional[str] = rest_field(name="ExceptionMessage")
    """Exception message."""

    @overload
    def __init__(
        self,
        *,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
        exception_type: Optional[str] = None,
        exception_message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, document_type=DocumentType.EXCEPTION, **kwargs)


class FilterConjunctionGroupInfo(_model_base.Model):
    """An AND-connected group of FilterInfo objects.

    All required parameters must be populated in order to send to server.

    :ivar filters: An array of filters. Required.
    :vartype filters: list[~livemetrics.models.FilterInfo]
    """

    filters: List["_models.FilterInfo"] = rest_field(name="Filters")
    """An array of filters. Required."""

    @overload
    def __init__(
        self,
        *,
        filters: List["_models.FilterInfo"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FilterInfo(_model_base.Model):
    """A filter set on UX.

    All required parameters must be populated in order to send to server.

    :ivar field_name: dimension name of the filter. Required.
    :vartype field_name: str
    :ivar predicate: Operator of the filter. Required. Known values are: "Equal", "NotEqual",
     "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
     "DoesNotContain".
    :vartype predicate: str or ~livemetrics.models.PredicateType
    :ivar comparand: Comparand of the filter. Required.
    :vartype comparand: str
    """

    field_name: str = rest_field(name="FieldName")
    """dimension name of the filter. Required."""
    predicate: Union[str, "_models.PredicateType"] = rest_field(name="Predicate")
    """Operator of the filter. Required. Known values are: \"Equal\", \"NotEqual\", \"LessThan\",
     \"GreaterThan\", \"LessThanOrEqual\", \"GreaterThanOrEqual\", \"Contains\", and
     \"DoesNotContain\"."""
    comparand: str = rest_field(name="Comparand")
    """Comparand of the filter. Required."""

    @overload
    def __init__(
        self,
        *,
        field_name: str,
        predicate: Union[str, "_models.PredicateType"],
        comparand: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyValuePairStringString(_model_base.Model):
    """Key-value pair of string and string.

    All required parameters must be populated in order to send to server.

    :ivar key: Key of the key-value pair. Required.
    :vartype key: str
    :ivar value: Value of the key-value pair.
    :vartype value: str
    """

    key: str = rest_field()
    """Key of the key-value pair. Required."""
    value: Optional[str] = rest_field()
    """Value of the key-value pair."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MetricPoint(_model_base.Model):
    """Metric data point.

    All required parameters must be populated in order to send to server.

    :ivar name: Metric name. Required.
    :vartype name: str
    :ivar value: Metric value. Required.
    :vartype value: float
    :ivar weight: Metric weight. Required.
    :vartype weight: int
    """

    name: str = rest_field(name="Name")
    """Metric name. Required."""
    value: float = rest_field(name="Value")
    """Metric value. Required."""
    weight: int = rest_field(name="Weight")
    """Metric weight. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        value: float,
        weight: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MonitoringDataPoint(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Monitoring data point coming from the client, which includes metrics, documents and other
    metadata info.

    All required parameters must be populated in order to send to server.

    :ivar version: Application Insights SDK version. Required.
    :vartype version: str
    :ivar invariant_version: Version/generation of the data contract (MonitoringDataPoint) between
     SDK and Live Metrics. Required.
    :vartype invariant_version: int
    :ivar instance: Service instance name where Application Insights SDK lives. Required.
    :vartype instance: str
    :ivar role_name: Service role name. Required.
    :vartype role_name: str
    :ivar machine_name: Computer name where Application Insights SDK lives. Required.
    :vartype machine_name: str
    :ivar stream_id: Identifies an Application Insights SDK as a trusted agent to report metrics
     and documents. Required.
    :vartype stream_id: str
    :ivar timestamp: Data point generation timestamp.
    :vartype timestamp: ~datetime.datetime
    :ivar transmission_time: Timestamp when the client transmits the metrics and documents to Live
     Metrics.
    :vartype transmission_time: ~datetime.datetime
    :ivar is_web_app: True if the current application is an Azure Web App. Required.
    :vartype is_web_app: bool
    :ivar performance_collection_supported: True if performance counters collection is supported.
     Required.
    :vartype performance_collection_supported: bool
    :ivar metrics: An array of metric data points.
    :vartype metrics: list[~livemetrics.models.MetricPoint]
    :ivar documents: An array of documents of a specific type {Request}, {RemoteDependency},
     {Exception}, {Event}, or {Trace}.
    :vartype documents: list[~livemetrics.models.DocumentIngress]
    :ivar top_cpu_processes: An array of top cpu consumption data point.
    :vartype top_cpu_processes: list[~livemetrics.models.ProcessCpuData]
    :ivar collection_configuration_errors: An array of error while SDK parses and applies the
     {CollectionConfigurationInfo} provided by Live Metrics.
    :vartype collection_configuration_errors:
     list[~livemetrics.models.CollectionConfigurationError]
    """

    version: str = rest_field(name="Version")
    """Application Insights SDK version. Required."""
    invariant_version: int = rest_field(name="InvariantVersion")
    """Version/generation of the data contract (MonitoringDataPoint) between SDK and Live Metrics.
     Required."""
    instance: str = rest_field(name="Instance")
    """Service instance name where Application Insights SDK lives. Required."""
    role_name: str = rest_field(name="RoleName")
    """Service role name. Required."""
    machine_name: str = rest_field(name="MachineName")
    """Computer name where Application Insights SDK lives. Required."""
    stream_id: str = rest_field(name="StreamId")
    """Identifies an Application Insights SDK as a trusted agent to report metrics and documents.
     Required."""
    timestamp: Optional[datetime.datetime] = rest_field(name="Timestamp", format="rfc3339")
    """Data point generation timestamp."""
    transmission_time: Optional[datetime.datetime] = rest_field(name="TransmissionTime", format="rfc3339")
    """Timestamp when the client transmits the metrics and documents to Live Metrics."""
    is_web_app: bool = rest_field(name="IsWebApp")
    """True if the current application is an Azure Web App. Required."""
    performance_collection_supported: bool = rest_field(name="PerformanceCollectionSupported")
    """True if performance counters collection is supported. Required."""
    metrics: Optional[List["_models.MetricPoint"]] = rest_field(name="Metrics")
    """An array of metric data points."""
    documents: Optional[List["_models.DocumentIngress"]] = rest_field(name="Documents")
    """An array of documents of a specific type {Request}, {RemoteDependency}, {Exception}, {Event},
     or {Trace}."""
    top_cpu_processes: Optional[List["_models.ProcessCpuData"]] = rest_field(name="TopCpuProcesses")
    """An array of top cpu consumption data point."""
    collection_configuration_errors: Optional[List["_models.CollectionConfigurationError"]] = rest_field(
        name="CollectionConfigurationErrors"
    )
    """An array of error while SDK parses and applies the {CollectionConfigurationInfo} provided by
     Live Metrics."""

    @overload
    def __init__(
        self,
        *,
        version: str,
        invariant_version: int,
        instance: str,
        role_name: str,
        machine_name: str,
        stream_id: str,
        is_web_app: bool,
        performance_collection_supported: bool,
        timestamp: Optional[datetime.datetime] = None,
        transmission_time: Optional[datetime.datetime] = None,
        metrics: Optional[List["_models.MetricPoint"]] = None,
        documents: Optional[List["_models.DocumentIngress"]] = None,
        top_cpu_processes: Optional[List["_models.ProcessCpuData"]] = None,
        collection_configuration_errors: Optional[List["_models.CollectionConfigurationError"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProcessCpuData(_model_base.Model):
    """CPU consumption datapoint.

    All required parameters must be populated in order to send to server.

    :ivar process_name: Process name. Required.
    :vartype process_name: str
    :ivar cpu_percentage: CPU consumption percentage. Required.
    :vartype cpu_percentage: int
    """

    process_name: str = rest_field(name="ProcessName")
    """Process name. Required."""
    cpu_percentage: int = rest_field(name="CpuPercentage")
    """CPU consumption percentage. Required."""

    @overload
    def __init__(
        self,
        *,
        process_name: str,
        cpu_percentage: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class QuotaConfigurationInfo(_model_base.Model):
    """Controls document quotas to be sent to Live Metrics.

    All required parameters must be populated in order to send to server.

    :ivar initial_quota: Initial quota.
    :vartype initial_quota: float
    :ivar max_quota: Max quota. Required.
    :vartype max_quota: float
    :ivar quota_accrual_rate_per_sec: Quota accrual rate per second. Required.
    :vartype quota_accrual_rate_per_sec: float
    """

    initial_quota: Optional[float] = rest_field(name="InitialQuota")
    """Initial quota."""
    max_quota: float = rest_field(name="MaxQuota")
    """Max quota. Required."""
    quota_accrual_rate_per_sec: float = rest_field(name="QuotaAccrualRatePerSec")
    """Quota accrual rate per second. Required."""

    @overload
    def __init__(
        self,
        *,
        max_quota: float,
        quota_accrual_rate_per_sec: float,
        initial_quota: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RemoteDependency(DocumentIngress, discriminator="RemoteDependency"):
    """RemoteDependency document type.

    All required parameters must be populated in order to send to server.

    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    :ivar document_type: Telemetry type for RemoteDependency. Required. Represents a remote
     dependency telemetry type.
    :vartype document_type: str or ~livemetrics.models.REMOTE_DEPENDENCY
    :ivar name: Name of the command initiated with this dependency call, e.g., GET /username.
    :vartype name: str
    :ivar command_name: URL of the dependency call to the target, with all query string parameters.
    :vartype command_name: str
    :ivar result_code: Result code of a dependency call. Examples are SQL error code and HTTP
     status code.
    :vartype result_code: str
    :ivar duration: Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S
     or P[n]W.
    :vartype duration: str
    """

    document_type: Literal[DocumentType.REMOTE_DEPENDENCY] = rest_discriminator(name="DocumentType")  # type: ignore
    """Telemetry type for RemoteDependency. Required. Represents a remote dependency telemetry type."""
    name: Optional[str] = rest_field(name="Name")
    """Name of the command initiated with this dependency call, e.g., GET /username."""
    command_name: Optional[str] = rest_field(name="CommandName")
    """URL of the dependency call to the target, with all query string parameters."""
    result_code: Optional[str] = rest_field(name="ResultCode")
    """Result code of a dependency call. Examples are SQL error code and HTTP status code."""
    duration: Optional[str] = rest_field(name="Duration")
    """Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W."""

    @overload
    def __init__(
        self,
        *,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
        name: Optional[str] = None,
        command_name: Optional[str] = None,
        result_code: Optional[str] = None,
        duration: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, document_type=DocumentType.REMOTE_DEPENDENCY, **kwargs)


class Request(DocumentIngress, discriminator="Request"):
    """Request document type.

    All required parameters must be populated in order to send to server.

    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    :ivar document_type: Telemetry type for Request. Required. Represents a request telemetry type.
    :vartype document_type: str or ~livemetrics.models.REQUEST
    :ivar name: Name of the request, e.g., 'GET /values/{id}'.
    :vartype name: str
    :ivar url: Request URL with all query string parameters.
    :vartype url: str
    :ivar response_code: Result of a request execution. For http requests, it could be some HTTP
     status code.
    :vartype response_code: str
    :ivar duration: Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S
     or P[n]W.
    :vartype duration: str
    """

    document_type: Literal[DocumentType.REQUEST] = rest_discriminator(name="DocumentType")  # type: ignore
    """Telemetry type for Request. Required. Represents a request telemetry type."""
    name: Optional[str] = rest_field(name="Name")
    """Name of the request, e.g., 'GET /values/{id}'."""
    url: Optional[str] = rest_field(name="Url")
    """Request URL with all query string parameters."""
    response_code: Optional[str] = rest_field(name="ResponseCode")
    """Result of a request execution. For http requests, it could be some HTTP status code."""
    duration: Optional[str] = rest_field(name="Duration")
    """Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W."""

    @overload
    def __init__(
        self,
        *,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
        name: Optional[str] = None,
        url: Optional[str] = None,
        response_code: Optional[str] = None,
        duration: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, document_type=DocumentType.REQUEST, **kwargs)


class ServiceError(_model_base.Model):
    """Optional http response body, whose existence carries additional error descriptions.

    All required parameters must be populated in order to send to server.

    :ivar request_id: A globally unique identifier to identify the diagnostic context. It defaults
     to the empty GUID. Required.
    :vartype request_id: str
    :ivar response_date_time: Service error response date time. Required.
    :vartype response_date_time: str
    :ivar code: Error code. Required.
    :vartype code: str
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar exception: Message of the exception that triggers the error response. Required.
    :vartype exception: str
    """

    request_id: str = rest_field(name="RequestId")
    """A globally unique identifier to identify the diagnostic context. It defaults to the empty GUID.
     Required."""
    response_date_time: str = rest_field(name="ResponseDateTime")
    """Service error response date time. Required."""
    code: str = rest_field(name="Code")
    """Error code. Required."""
    message: str = rest_field(name="Message")
    """Error message. Required."""
    exception: str = rest_field(name="Exception")
    """Message of the exception that triggers the error response. Required."""

    @overload
    def __init__(
        self,
        *,
        request_id: str,
        response_date_time: str,
        code: str,
        message: str,
        exception: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Trace(DocumentIngress, discriminator="Trace"):
    """Trace document type.

    All required parameters must be populated in order to send to server.

    :ivar document_stream_ids: An array of document streaming ids. Each id identifies a flow of
     documents customized by UX customers.
    :vartype document_stream_ids: list[str]
    :ivar properties: Collection of custom properties.
    :vartype properties: list[~livemetrics.models.KeyValuePairStringString]
    :ivar document_type: Telemetry type for Trace. Required. Represents a trace telemetry type.
    :vartype document_type: str or ~livemetrics.models.TRACE
    :ivar message: Trace message.
    :vartype message: str
    """

    document_type: Literal[DocumentType.TRACE] = rest_discriminator(name="DocumentType")  # type: ignore
    """Telemetry type for Trace. Required. Represents a trace telemetry type."""
    message: Optional[str] = rest_field(name="Message")
    """Trace message."""

    @overload
    def __init__(
        self,
        *,
        document_stream_ids: Optional[List[str]] = None,
        properties: Optional[List["_models.KeyValuePairStringString"]] = None,
        message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, document_type=DocumentType.TRACE, **kwargs)
