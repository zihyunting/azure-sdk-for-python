# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ..._operations._operations import build_live_metrics_is_subscribed_request, build_live_metrics_publish_request
from .._vendor import LiveMetricsClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class LiveMetricsClientOperationsMixin(LiveMetricsClientMixinABC):
    @overload
    async def is_subscribed(
        self,
        monitoring_data_point: Optional[_models.MonitoringDataPoint] = None,
        *,
        ikey: str,
        transmission_time: Optional[int] = None,
        machine_name: Optional[str] = None,
        instance_name: Optional[str] = None,
        stream_id: Optional[str] = None,
        role_name: Optional[str] = None,
        invariant_version: Optional[str] = None,
        configuration_etag: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Determine whether there is any subscription to the metrics and documents.

        :param monitoring_data_point: Data contract between Application Insights client SDK and Live
         Metrics. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance
         name and invariant version. Default value is None.
        :type monitoring_data_point: ~livemetrics.models.MonitoringDataPoint
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword machine_name: Computer name where Application Insights SDK lives. Live Metrics uses
         machine name with instance name as a backup. Default value is None.
        :paramtype machine_name: str
        :keyword instance_name: Service instance name where Application Insights SDK lives. Live
         Metrics uses machine name with instance name as a backup. Default value is None.
        :paramtype instance_name: str
        :keyword stream_id: Identifies an Application Insights SDK as trusted agent to report metrics
         and documents. Default value is None.
        :paramtype stream_id: str
        :keyword role_name: Cloud role name of the service. Default value is None.
        :paramtype role_name: str
        :keyword invariant_version: Version/generation of the data contract (MonitoringDataPoint)
         between the client and Live Metrics. Default value is None.
        :paramtype invariant_version: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                monitoring_data_point = {
                    "Instance": "str",  # Service instance name where Application Insights SDK
                      lives. Required.
                    "InvariantVersion": 0,  # Version/generation of the data contract
                      (MonitoringDataPoint) between SDK and Live Metrics. Required.
                    "IsWebApp": bool,  # True if the current application is an Azure Web App.
                      Required.
                    "MachineName": "str",  # Computer name where Application Insights SDK lives.
                      Required.
                    "PerformanceCollectionSupported": bool,  # True if performance counters
                      collection is supported. Required.
                    "RoleName": "str",  # Service role name. Required.
                    "StreamId": "str",  # Identifies an Application Insights SDK as a trusted
                      agent to report metrics and documents. Required.
                    "Version": "str",  # Application Insights SDK version. Required.
                    "CollectionConfigurationErrors": [
                        {
                            "CollectionConfigurationErrorType": "str",  # Error type.
                              Required. Known values are: "Unknown", "PerformanceCounterParsing",
                              "PerformanceCounterUnexpected", "PerformanceCounterDuplicateIds",
                              "DocumentStreamDuplicateIds", "DocumentStreamFailureToCreate",
                              "DocumentStreamFailureToCreateFilterUnexpected", "MetricDuplicateIds",
                              "MetricTelemetryTypeUnsupported", "MetricFailureToCreate",
                              "MetricFailureToCreateFilterUnexpected",
                              "FilterFailureToCreateUnexpected", and
                              "CollectionConfigurationFailureToCreateUnexpected".
                            "Data": [
                                {
                                    "key": "str",  # Key of the key-value pair.
                                      Required.
                                    "value": "str"  # Optional. Value of the
                                      key-value pair.
                                }
                            ],
                            "FullException": "str",  # Exception that led to the creation
                              of the configuration error. Required.
                            "Message": "str"  # Error message. Required.
                        }
                    ],
                    "Documents": [
                        document_ingress
                    ],
                    "Metrics": [
                        {
                            "Name": "str",  # Metric name. Required.
                            "Value": 0.0,  # Metric value. Required.
                            "Weight": 0  # Metric weight. Required.
                        }
                    ],
                    "Timestamp": "2020-02-20 00:00:00",  # Optional. Data point generation
                      timestamp.
                    "TopCpuProcesses": [
                        {
                            "CpuPercentage": 0,  # CPU consumption percentage. Required.
                            "ProcessName": "str"  # Process name. Required.
                        }
                    ],
                    "TransmissionTime": "2020-02-20 00:00:00"  # Optional. Timestamp when the
                      client transmits the metrics and documents to Live Metrics.
                }

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """

    @overload
    async def is_subscribed(
        self,
        monitoring_data_point: Optional[JSON] = None,
        *,
        ikey: str,
        transmission_time: Optional[int] = None,
        machine_name: Optional[str] = None,
        instance_name: Optional[str] = None,
        stream_id: Optional[str] = None,
        role_name: Optional[str] = None,
        invariant_version: Optional[str] = None,
        configuration_etag: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Determine whether there is any subscription to the metrics and documents.

        :param monitoring_data_point: Data contract between Application Insights client SDK and Live
         Metrics. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance
         name and invariant version. Default value is None.
        :type monitoring_data_point: JSON
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword machine_name: Computer name where Application Insights SDK lives. Live Metrics uses
         machine name with instance name as a backup. Default value is None.
        :paramtype machine_name: str
        :keyword instance_name: Service instance name where Application Insights SDK lives. Live
         Metrics uses machine name with instance name as a backup. Default value is None.
        :paramtype instance_name: str
        :keyword stream_id: Identifies an Application Insights SDK as trusted agent to report metrics
         and documents. Default value is None.
        :paramtype stream_id: str
        :keyword role_name: Cloud role name of the service. Default value is None.
        :paramtype role_name: str
        :keyword invariant_version: Version/generation of the data contract (MonitoringDataPoint)
         between the client and Live Metrics. Default value is None.
        :paramtype invariant_version: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """

    @overload
    async def is_subscribed(
        self,
        monitoring_data_point: Optional[IO[bytes]] = None,
        *,
        ikey: str,
        transmission_time: Optional[int] = None,
        machine_name: Optional[str] = None,
        instance_name: Optional[str] = None,
        stream_id: Optional[str] = None,
        role_name: Optional[str] = None,
        invariant_version: Optional[str] = None,
        configuration_etag: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Determine whether there is any subscription to the metrics and documents.

        :param monitoring_data_point: Data contract between Application Insights client SDK and Live
         Metrics. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance
         name and invariant version. Default value is None.
        :type monitoring_data_point: IO[bytes]
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword machine_name: Computer name where Application Insights SDK lives. Live Metrics uses
         machine name with instance name as a backup. Default value is None.
        :paramtype machine_name: str
        :keyword instance_name: Service instance name where Application Insights SDK lives. Live
         Metrics uses machine name with instance name as a backup. Default value is None.
        :paramtype instance_name: str
        :keyword stream_id: Identifies an Application Insights SDK as trusted agent to report metrics
         and documents. Default value is None.
        :paramtype stream_id: str
        :keyword role_name: Cloud role name of the service. Default value is None.
        :paramtype role_name: str
        :keyword invariant_version: Version/generation of the data contract (MonitoringDataPoint)
         between the client and Live Metrics. Default value is None.
        :paramtype invariant_version: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """

    @distributed_trace_async
    async def is_subscribed(
        self,
        monitoring_data_point: Optional[Union[_models.MonitoringDataPoint, JSON, IO[bytes]]] = None,
        *,
        ikey: str,
        transmission_time: Optional[int] = None,
        machine_name: Optional[str] = None,
        instance_name: Optional[str] = None,
        stream_id: Optional[str] = None,
        role_name: Optional[str] = None,
        invariant_version: Optional[str] = None,
        configuration_etag: Optional[str] = None,
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Determine whether there is any subscription to the metrics and documents.

        :param monitoring_data_point: Data contract between Application Insights client SDK and Live
         Metrics. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance
         name and invariant version. Is one of the following types: MonitoringDataPoint, JSON, IO[bytes]
         Default value is None.
        :type monitoring_data_point: ~livemetrics.models.MonitoringDataPoint or JSON or IO[bytes]
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword machine_name: Computer name where Application Insights SDK lives. Live Metrics uses
         machine name with instance name as a backup. Default value is None.
        :paramtype machine_name: str
        :keyword instance_name: Service instance name where Application Insights SDK lives. Live
         Metrics uses machine name with instance name as a backup. Default value is None.
        :paramtype instance_name: str
        :keyword stream_id: Identifies an Application Insights SDK as trusted agent to report metrics
         and documents. Default value is None.
        :paramtype stream_id: str
        :keyword role_name: Cloud role name of the service. Default value is None.
        :paramtype role_name: str
        :keyword invariant_version: Version/generation of the data contract (MonitoringDataPoint)
         between the client and Live Metrics. Default value is None.
        :paramtype invariant_version: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                monitoring_data_point = {
                    "Instance": "str",  # Service instance name where Application Insights SDK
                      lives. Required.
                    "InvariantVersion": 0,  # Version/generation of the data contract
                      (MonitoringDataPoint) between SDK and Live Metrics. Required.
                    "IsWebApp": bool,  # True if the current application is an Azure Web App.
                      Required.
                    "MachineName": "str",  # Computer name where Application Insights SDK lives.
                      Required.
                    "PerformanceCollectionSupported": bool,  # True if performance counters
                      collection is supported. Required.
                    "RoleName": "str",  # Service role name. Required.
                    "StreamId": "str",  # Identifies an Application Insights SDK as a trusted
                      agent to report metrics and documents. Required.
                    "Version": "str",  # Application Insights SDK version. Required.
                    "CollectionConfigurationErrors": [
                        {
                            "CollectionConfigurationErrorType": "str",  # Error type.
                              Required. Known values are: "Unknown", "PerformanceCounterParsing",
                              "PerformanceCounterUnexpected", "PerformanceCounterDuplicateIds",
                              "DocumentStreamDuplicateIds", "DocumentStreamFailureToCreate",
                              "DocumentStreamFailureToCreateFilterUnexpected", "MetricDuplicateIds",
                              "MetricTelemetryTypeUnsupported", "MetricFailureToCreate",
                              "MetricFailureToCreateFilterUnexpected",
                              "FilterFailureToCreateUnexpected", and
                              "CollectionConfigurationFailureToCreateUnexpected".
                            "Data": [
                                {
                                    "key": "str",  # Key of the key-value pair.
                                      Required.
                                    "value": "str"  # Optional. Value of the
                                      key-value pair.
                                }
                            ],
                            "FullException": "str",  # Exception that led to the creation
                              of the configuration error. Required.
                            "Message": "str"  # Error message. Required.
                        }
                    ],
                    "Documents": [
                        document_ingress
                    ],
                    "Metrics": [
                        {
                            "Name": "str",  # Metric name. Required.
                            "Value": 0.0,  # Metric value. Required.
                            "Weight": 0  # Metric weight. Required.
                        }
                    ],
                    "Timestamp": "2020-02-20 00:00:00",  # Optional. Data point generation
                      timestamp.
                    "TopCpuProcesses": [
                        {
                            "CpuPercentage": 0,  # CPU consumption percentage. Required.
                            "ProcessName": "str"  # Process name. Required.
                        }
                    ],
                    "TransmissionTime": "2020-02-20 00:00:00"  # Optional. Timestamp when the
                      client transmits the metrics and documents to Live Metrics.
                }

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CollectionConfigurationInfo] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(monitoring_data_point, (IOBase, bytes)):
            _content = monitoring_data_point
        else:
            if monitoring_data_point is not None:
                _content = json.dumps(monitoring_data_point, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore
            else:
                _content = None

        _request = build_live_metrics_is_subscribed_request(
            ikey=ikey,
            transmission_time=transmission_time,
            machine_name=machine_name,
            instance_name=instance_name,
            stream_id=stream_id,
            role_name=role_name,
            invariant_version=invariant_version,
            configuration_etag=configuration_etag,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ServiceError, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-qps-subscribed"] = self._deserialize("str", response.headers.get("x-ms-qps-subscribed"))
        response_headers["x-ms-qps-configuration-etag"] = self._deserialize(
            "str", response.headers.get("x-ms-qps-configuration-etag")
        )
        response_headers["x-ms-qps-service-polling-interval-hint"] = self._deserialize(
            "str", response.headers.get("x-ms-qps-service-polling-interval-hint")
        )
        response_headers["x-ms-qps-service-endpoint-redirect-v2"] = self._deserialize(
            "str", response.headers.get("x-ms-qps-service-endpoint-redirect-v2")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.CollectionConfigurationInfo, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def publish(
        self,
        monitoring_data_points: Optional[List[_models.MonitoringDataPoint]] = None,
        *,
        ikey: str,
        configuration_etag: Optional[str] = None,
        transmission_time: Optional[int] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Publish live metrics to the Live Metrics service when there is an active subscription to the
        metrics.

        :param monitoring_data_points: Data contract between the client and Live Metrics.
         /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and
         invariant version. Default value is None.
        :type monitoring_data_points: list[~livemetrics.models.MonitoringDataPoint]
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                monitoring_data_points = [
                    {
                        "Instance": "str",  # Service instance name where Application
                          Insights SDK lives. Required.
                        "InvariantVersion": 0,  # Version/generation of the data contract
                          (MonitoringDataPoint) between SDK and Live Metrics. Required.
                        "IsWebApp": bool,  # True if the current application is an Azure Web
                          App. Required.
                        "MachineName": "str",  # Computer name where Application Insights SDK
                          lives. Required.
                        "PerformanceCollectionSupported": bool,  # True if performance
                          counters collection is supported. Required.
                        "RoleName": "str",  # Service role name. Required.
                        "StreamId": "str",  # Identifies an Application Insights SDK as a
                          trusted agent to report metrics and documents. Required.
                        "Version": "str",  # Application Insights SDK version. Required.
                        "CollectionConfigurationErrors": [
                            {
                                "CollectionConfigurationErrorType": "str",  # Error
                                  type. Required. Known values are: "Unknown",
                                  "PerformanceCounterParsing", "PerformanceCounterUnexpected",
                                  "PerformanceCounterDuplicateIds", "DocumentStreamDuplicateIds",
                                  "DocumentStreamFailureToCreate",
                                  "DocumentStreamFailureToCreateFilterUnexpected",
                                  "MetricDuplicateIds", "MetricTelemetryTypeUnsupported",
                                  "MetricFailureToCreate", "MetricFailureToCreateFilterUnexpected",
                                  "FilterFailureToCreateUnexpected", and
                                  "CollectionConfigurationFailureToCreateUnexpected".
                                "Data": [
                                    {
                                        "key": "str",  # Key of the key-value
                                          pair. Required.
                                        "value": "str"  # Optional. Value of
                                          the key-value pair.
                                    }
                                ],
                                "FullException": "str",  # Exception that led to the
                                  creation of the configuration error. Required.
                                "Message": "str"  # Error message. Required.
                            }
                        ],
                        "Documents": [
                            document_ingress
                        ],
                        "Metrics": [
                            {
                                "Name": "str",  # Metric name. Required.
                                "Value": 0.0,  # Metric value. Required.
                                "Weight": 0  # Metric weight. Required.
                            }
                        ],
                        "Timestamp": "2020-02-20 00:00:00",  # Optional. Data point
                          generation timestamp.
                        "TopCpuProcesses": [
                            {
                                "CpuPercentage": 0,  # CPU consumption percentage.
                                  Required.
                                "ProcessName": "str"  # Process name. Required.
                            }
                        ],
                        "TransmissionTime": "2020-02-20 00:00:00"  # Optional. Timestamp when
                          the client transmits the metrics and documents to Live Metrics.
                    }
                ]

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """

    @overload
    async def publish(
        self,
        monitoring_data_points: Optional[IO[bytes]] = None,
        *,
        ikey: str,
        configuration_etag: Optional[str] = None,
        transmission_time: Optional[int] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Publish live metrics to the Live Metrics service when there is an active subscription to the
        metrics.

        :param monitoring_data_points: Data contract between the client and Live Metrics.
         /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and
         invariant version. Default value is None.
        :type monitoring_data_points: IO[bytes]
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """

    @distributed_trace_async
    async def publish(
        self,
        monitoring_data_points: Optional[Union[List[_models.MonitoringDataPoint], IO[bytes]]] = None,
        *,
        ikey: str,
        configuration_etag: Optional[str] = None,
        transmission_time: Optional[int] = None,
        **kwargs: Any
    ) -> _models.CollectionConfigurationInfo:
        # pylint: disable=line-too-long
        """Publish live metrics to the Live Metrics service when there is an active subscription to the
        metrics.

        :param monitoring_data_points: Data contract between the client and Live Metrics.
         /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and
         invariant version. Is either a [MonitoringDataPoint] type or a IO[bytes] type. Default value is
         None.
        :type monitoring_data_points: list[~livemetrics.models.MonitoringDataPoint] or IO[bytes]
        :keyword ikey: The instrumentation key of the target Application Insights component for which
         the client checks whether there's any subscription to it. Required.
        :paramtype ikey: str
        :keyword configuration_etag: An encoded string that indicates whether the collection
         configuration is changed. Default value is None.
        :paramtype configuration_etag: str
        :keyword transmission_time: Timestamp when the client transmits the metrics and documents to
         Live Metrics. A 8-byte long type of ticks. Default value is None.
        :paramtype transmission_time: int
        :return: CollectionConfigurationInfo. The CollectionConfigurationInfo is compatible with
         MutableMapping
        :rtype: ~livemetrics.models.CollectionConfigurationInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "DocumentStreams": [
                        {
                            "DocumentFilterGroups": [
                                {
                                    "Filters": {
                                        "Filters": [
                                            {
                                                "Comparand": "str",
                                                  # Comparand of the filter. Required.
                                                "FieldName": "str",
                                                  # dimension name of the filter. Required.
                                                "Predicate": "str"  #
                                                  Operator of the filter. Required. Known values are:
                                                  "Equal", "NotEqual", "LessThan", "GreaterThan",
                                                  "LessThanOrEqual", "GreaterThanOrEqual", "Contains",
                                                  and "DoesNotContain".
                                            }
                                        ]
                                    },
                                    "TelemetryType": "str"  # Telemetry type.
                                      Required. Known values are: "Request", "Dependency", "Exception",
                                      "Event", "Metric", "PerformanceCounter", and "Trace".
                                }
                            ],
                            "Id": "str"  # Identifier of the document stream initiated by
                              a UX. Required.
                        }
                    ],
                    "ETag": "str",  # An encoded string that indicates whether the collection
                      configuration is changed. Required.
                    "Metrics": [
                        {
                            "Aggregation": "str",  # Aggregation type. This is the
                              aggregation done from everything within a single server. Required. Known
                              values are: "Avg", "Sum", "Min", and "Max".
                            "BackEndAggregation": "str",  # Aggregation type. This
                              Aggregation is done across the values for all the servers taken together.
                              Required. Known values are: "Avg", "Sum", "Min", and "Max".
                            "FilterGroups": [
                                {
                                    "Filters": [
                                        {
                                            "Comparand": "str",  #
                                              Comparand of the filter. Required.
                                            "FieldName": "str",  #
                                              dimension name of the filter. Required.
                                            "Predicate": "str"  #
                                              Operator of the filter. Required. Known values are:
                                              "Equal", "NotEqual", "LessThan", "GreaterThan",
                                              "LessThanOrEqual", "GreaterThanOrEqual", "Contains", and
                                              "DoesNotContain".
                                        }
                                    ]
                                }
                            ],
                            "Id": "str",  # metric configuration identifier. Required.
                            "Projection": "str",  # Telemetry's metric dimension whose
                              value is to be aggregated. Example values: Duration, Count(),...
                              Required.
                            "TelemetryType": "str"  # Telemetry type. Required.
                        }
                    ],
                    "QuotaInfo": {
                        "MaxQuota": 0.0,  # Max quota. Required.
                        "QuotaAccrualRatePerSec": 0.0,  # Quota accrual rate per second.
                          Required.
                        "InitialQuota": 0.0  # Optional. Initial quota.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CollectionConfigurationInfo] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(monitoring_data_points, (IOBase, bytes)):
            _content = monitoring_data_points
        else:
            if monitoring_data_points is not None:
                _content = json.dumps(monitoring_data_points, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore
            else:
                _content = None

        _request = build_live_metrics_publish_request(
            ikey=ikey,
            configuration_etag=configuration_etag,
            transmission_time=transmission_time,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ServiceError, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-qps-subscribed"] = self._deserialize("str", response.headers.get("x-ms-qps-subscribed"))
        response_headers["x-ms-qps-configuration-etag"] = self._deserialize(
            "str", response.headers.get("x-ms-qps-configuration-etag")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.CollectionConfigurationInfo, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
