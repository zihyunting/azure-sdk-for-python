# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar, Union

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._generate_operations import build_access_token_request, build_restricted_viewer_access_token_request

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class GenerateOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.videoindexer.aio.ViManagementClient`'s
        :attr:`generate` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def access_token(
        self,
        resource_group_name: str,
        account_name: str,
        permission_type: Union[str, _models.PermissionType],
        scope: Union[str, _models.Scope],
        video_id: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.AccessToken:
        """Generate an Azure Video Indexer access token.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The name of the Azure Video Indexer account. Required.
        :type account_name: str
        :param permission_type: The requested permission. Known values are: "Contributor" and "Reader".
         Required.
        :type permission_type: str or ~azure.mgmt.videoindexer.models.PermissionType
        :param scope: The requested media type. Known values are: "Video", "Account", and "Project".
         Required.
        :type scope: str or ~azure.mgmt.videoindexer.models.Scope
        :param video_id: The video ID. Default value is None.
        :type video_id: str
        :param project_id: The project ID. Default value is None.
        :type project_id: str
        :return: AccessToken or the result of cls(response)
        :rtype: ~azure.mgmt.videoindexer.models.AccessToken
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.AccessToken] = kwargs.pop("cls", None)

        _parameters = _models.GenerateAccessTokenParameters(
            permission_type=permission_type, project_id=project_id, scope=scope, video_id=video_id
        )
        if _parameters is not None:
            _json = self._serialize.body(_parameters, "GenerateAccessTokenParameters")
        else:
            _json = None

        _request = build_access_token_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("AccessToken", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def restricted_viewer_access_token(
        self,
        resource_group_name: str,
        account_name: str,
        scope: Union[str, _models.Scope],
        video_id: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.AccessToken:
        """Generate an Azure Video Indexer restricted viewer access token.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The name of the Azure Video Indexer account. Required.
        :type account_name: str
        :param scope: The requested media type. Known values are: "Video", "Account", and "Project".
         Required.
        :type scope: str or ~azure.mgmt.videoindexer.models.Scope
        :param video_id: The video ID. Default value is None.
        :type video_id: str
        :param project_id: The project ID. Default value is None.
        :type project_id: str
        :return: AccessToken or the result of cls(response)
        :rtype: ~azure.mgmt.videoindexer.models.AccessToken
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.AccessToken] = kwargs.pop("cls", None)

        _parameters = _models.GenerateRestrictedViewerAccessTokenParameters(
            project_id=project_id, scope=scope, video_id=video_id
        )
        if _parameters is not None:
            _json = self._serialize.body(_parameters, "GenerateRestrictedViewerAccessTokenParameters")
        else:
            _json = None

        _request = build_restricted_viewer_access_token_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("AccessToken", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
