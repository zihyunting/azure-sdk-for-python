# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccessToken(_serialization.Model):
    """Azure Video Indexer access token.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar access_token: The access token.
    :vartype access_token: str
    """

    _validation = {
        "access_token": {"readonly": True},
    }

    _attribute_map = {
        "access_token": {"key": "accessToken", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.access_token = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Account(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """An Azure Video Indexer account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.videoindexer.models.SystemData
    :ivar tenant_id: The account's tenant id.
    :vartype tenant_id: str
    :ivar account_id: The account's data-plane ID. This can be set only when connecting an existing
     classic account.
    :vartype account_id: str
    :ivar account_name: The account's name.
    :vartype account_name: str
    :ivar storage_services: The storage services details.
    :vartype storage_services: ~azure.mgmt.videoindexer.models.StorageServicesForPutRequest
    :ivar total_seconds_indexed: An integer representing the total seconds that have been indexed
     on the account.
    :vartype total_seconds_indexed: int
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.videoindexer.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "system_data": {"readonly": True},
        "tenant_id": {"readonly": True},
        "account_name": {"readonly": True},
        "total_seconds_indexed": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tenant_id": {"key": "properties.tenantId", "type": "str"},
        "account_id": {"key": "properties.accountId", "type": "str"},
        "account_name": {"key": "properties.accountName", "type": "str"},
        "storage_services": {"key": "properties.storageServices", "type": "StorageServicesForPutRequest"},
        "total_seconds_indexed": {"key": "properties.totalSecondsIndexed", "type": "int"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        account_id: str = "00000000-0000-0000-0000-000000000000",
        storage_services: Optional["_models.StorageServicesForPutRequest"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
        :keyword account_id: The account's data-plane ID. This can be set only when connecting an
         existing classic account.
        :paramtype account_id: str
        :keyword storage_services: The storage services details.
        :paramtype storage_services: ~azure.mgmt.videoindexer.models.StorageServicesForPutRequest
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.system_data = None
        self.tenant_id = None
        self.account_id = account_id
        self.account_name = None
        self.storage_services = storage_services
        self.total_seconds_indexed = None
        self.provisioning_state = None


class AccountCheckNameAvailabilityParameters(_serialization.Model):
    """The parameters used to check the availability of the Video Indexer account name.

    All required parameters must be populated in order to send to server.

    :ivar name: The VideoIndexer account name. Required.
    :vartype name: str
    :ivar type: The type of resource, Microsoft.VideoIndexer/accounts. Required.
     "Microsoft.VideoIndexer/accounts"
    :vartype type: str or ~azure.mgmt.videoindexer.models.Type
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, name: str, type: Union[str, "_models.Type"], **kwargs: Any) -> None:
        """
        :keyword name: The VideoIndexer account name. Required.
        :paramtype name: str
        :keyword type: The type of resource, Microsoft.VideoIndexer/accounts. Required.
         "Microsoft.VideoIndexer/accounts"
        :paramtype type: str or ~azure.mgmt.videoindexer.models.Type
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class AccountList(_serialization.Model):
    """The list operation response, that contains the data pools and their properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of accounts and their properties.
    :vartype value: list[~azure.mgmt.videoindexer.models.Account]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Account]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class Tags(_serialization.Model):
    """Resource tags.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class AccountPatch(Tags):
    """Azure Video Indexer account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
    :ivar tenant_id: The account's tenant id.
    :vartype tenant_id: str
    :ivar account_id: The account's data-plane ID.
    :vartype account_id: str
    :ivar storage_services: The storage services details.
    :vartype storage_services: ~azure.mgmt.videoindexer.models.StorageServicesForPatchRequest
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.videoindexer.models.ProvisioningState
    """

    _validation = {
        "tenant_id": {"readonly": True},
        "account_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "tenant_id": {"key": "properties.tenantId", "type": "str"},
        "account_id": {"key": "properties.accountId", "type": "str"},
        "storage_services": {"key": "properties.storageServices", "type": "StorageServicesForPatchRequest"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        storage_services: Optional["_models.StorageServicesForPatchRequest"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
        :keyword storage_services: The storage services details.
        :paramtype storage_services: ~azure.mgmt.videoindexer.models.StorageServicesForPatchRequest
        """
        super().__init__(tags=tags, **kwargs)
        self.identity = identity
        self.tenant_id = None
        self.account_id = None
        self.storage_services = storage_services
        self.provisioning_state = None


class CheckNameAvailabilityResult(_serialization.Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: Gets a boolean value that indicates whether the name is available for you
     to use. If true, the name is available. If false, the name has already been taken.
    :vartype name_available: bool
    :ivar reason: Gets the reason that a Video Indexer account name could not be used. The Reason
     element is only returned if NameAvailable is false. "AlreadyExists"
    :vartype reason: str or ~azure.mgmt.videoindexer.models.Reason
    :ivar message: Gets an error message explaining the Reason value in more detail.
    :vartype message: str
    """

    _validation = {
        "name_available": {"readonly": True},
        "reason": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "name_available": {"key": "nameAvailable", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class ErrorDefinition(_serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.videoindexer.models.ErrorDefinition]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "details": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDefinition]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(_serialization.Model):
    """Error response.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.videoindexer.models.ErrorDefinition
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDefinition"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDefinition"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error details.
        :paramtype error: ~azure.mgmt.videoindexer.models.ErrorDefinition
        """
        super().__init__(**kwargs)
        self.error = error


class GenerateAccessTokenParameters(_serialization.Model):
    """Access token generation request's parameters.

    All required parameters must be populated in order to send to server.

    :ivar permission_type: The requested permission. Required. Known values are: "Contributor" and
     "Reader".
    :vartype permission_type: str or ~azure.mgmt.videoindexer.models.PermissionType
    :ivar scope: The requested media type. Required. Known values are: "Video", "Account", and
     "Project".
    :vartype scope: str or ~azure.mgmt.videoindexer.models.Scope
    :ivar video_id: The video ID.
    :vartype video_id: str
    :ivar project_id: The project ID.
    :vartype project_id: str
    """

    _validation = {
        "permission_type": {"required": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "permission_type": {"key": "permissionType", "type": "str"},
        "scope": {"key": "scope", "type": "str"},
        "video_id": {"key": "videoId", "type": "str"},
        "project_id": {"key": "projectId", "type": "str"},
    }

    def __init__(
        self,
        *,
        permission_type: Union[str, "_models.PermissionType"],
        scope: Union[str, "_models.Scope"],
        video_id: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword permission_type: The requested permission. Required. Known values are: "Contributor"
         and "Reader".
        :paramtype permission_type: str or ~azure.mgmt.videoindexer.models.PermissionType
        :keyword scope: The requested media type. Required. Known values are: "Video", "Account", and
         "Project".
        :paramtype scope: str or ~azure.mgmt.videoindexer.models.Scope
        :keyword video_id: The video ID.
        :paramtype video_id: str
        :keyword project_id: The project ID.
        :paramtype project_id: str
        """
        super().__init__(**kwargs)
        self.permission_type = permission_type
        self.scope = scope
        self.video_id = video_id
        self.project_id = project_id


class GenerateRestrictedViewerAccessTokenParameters(_serialization.Model):  # pylint: disable=name-too-long
    """Restricted viewer access token generation request's parameters.

    All required parameters must be populated in order to send to server.

    :ivar scope: The requested media type. Required. Known values are: "Video", "Account", and
     "Project".
    :vartype scope: str or ~azure.mgmt.videoindexer.models.Scope
    :ivar video_id: The video ID.
    :vartype video_id: str
    :ivar project_id: The project ID.
    :vartype project_id: str
    """

    _validation = {
        "scope": {"required": True},
    }

    _attribute_map = {
        "scope": {"key": "scope", "type": "str"},
        "video_id": {"key": "videoId", "type": "str"},
        "project_id": {"key": "projectId", "type": "str"},
    }

    def __init__(
        self,
        *,
        scope: Union[str, "_models.Scope"],
        video_id: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword scope: The requested media type. Required. Known values are: "Video", "Account", and
         "Project".
        :paramtype scope: str or ~azure.mgmt.videoindexer.models.Scope
        :keyword video_id: The video ID.
        :paramtype video_id: str
        :keyword project_id: The project ID.
        :paramtype project_id: str
        """
        super().__init__(**kwargs)
        self.scope = scope
        self.video_id = video_id
        self.project_id = project_id


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.videoindexer.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.videoindexer.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.videoindexer.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.videoindexer.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class Operation(_serialization.Model):
    """Operation detail payload.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar action_type: Indicates the action type.
    :vartype action_type: str
    :ivar display: Display of the operation.
    :vartype display: ~azure.mgmt.videoindexer.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "action_type": {"readonly": True},
        "display": {"readonly": True},
        "origin": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "action_type": {"key": "actionType", "type": "str"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.action_type = None
        self.display = None
        self.origin = None


class OperationDisplay(_serialization.Model):
    """Operation display payload.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource of the operation.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """Available operations of the service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the Resource Provider.
    :vartype value: list[~azure.mgmt.videoindexer.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class StorageServicesForPatchRequest(_serialization.Model):
    """The storage services details.

    :ivar user_assigned_identity: The user assigned identity to be used to grant permissions.
    :vartype user_assigned_identity: str
    """

    _attribute_map = {
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
    }

    def __init__(self, *, user_assigned_identity: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword user_assigned_identity: The user assigned identity to be used to grant permissions.
        :paramtype user_assigned_identity: str
        """
        super().__init__(**kwargs)
        self.user_assigned_identity = user_assigned_identity


class StorageServicesForPutRequest(_serialization.Model):
    """The storage services details.

    :ivar resource_id: The storage services resource id.
    :vartype resource_id: str
    :ivar user_assigned_identity: The user assigned identity to be used to grant permissions.
    :vartype user_assigned_identity: str
    """

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
    }

    def __init__(
        self, *, resource_id: Optional[str] = None, user_assigned_identity: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: The storage services resource id.
        :paramtype resource_id: str
        :keyword user_assigned_identity: The user assigned identity to be used to grant permissions.
        :paramtype user_assigned_identity: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.user_assigned_identity = user_assigned_identity


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None
