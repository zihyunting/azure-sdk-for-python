# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._tenant_action_groups_operations import (
    build_create_or_update_request,
    build_delete_request,
    build_get_request,
    build_list_by_management_group_id_request,
    build_update_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class TenantActionGroupsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.monitor.v2023_03_01_preview.aio.MonitorManagementClient`'s
        :attr:`tenant_action_groups` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")
        self._api_version = input_args.pop(0) if input_args else kwargs.pop("api_version")

    @overload
    async def create_or_update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        action_group: _models.TenantActionGroupResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Create a new tenant action group or update an existing one.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param action_group: The tenant action group to create or use for the update. Required.
        :type action_group: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        action_group: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Create a new tenant action group or update an existing one.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param action_group: The tenant action group to create or use for the update. Required.
        :type action_group: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        action_group: Union[_models.TenantActionGroupResource, IO[bytes]],
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Create a new tenant action group or update an existing one.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param action_group: The tenant action group to create or use for the update. Is either a
         TenantActionGroupResource type or a IO[bytes] type. Required.
        :type action_group: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource or
         IO[bytes]
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-03-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TenantActionGroupResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(action_group, (IOBase, bytes)):
            _content = action_group
        else:
            _json = self._serialize.body(action_group, "TenantActionGroupResource")

        _request = build_create_or_update_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize("TenantActionGroupResource", pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize("TenantActionGroupResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get(
        self, management_group_id: str, tenant_action_group_name: str, x_ms_client_tenant_id: str, **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Get a tenant action group.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-03-01-preview")
        )
        cls: ClsType[_models.TenantActionGroupResource] = kwargs.pop("cls", None)

        _request = build_get_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("TenantActionGroupResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, management_group_id: str, tenant_action_group_name: str, x_ms_client_tenant_id: str, **kwargs: Any
    ) -> None:
        """Delete a tenant action group.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-03-01-preview")
        )
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    async def update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        tenant_action_group_patch: _models.ActionGroupPatchBody,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate
        method.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param tenant_action_group_patch: Parameters supplied to the operation. Required.
        :type tenant_action_group_patch:
         ~azure.mgmt.monitor.v2023_03_01_preview.models.ActionGroupPatchBody
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        tenant_action_group_patch: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate
        method.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param tenant_action_group_patch: Parameters supplied to the operation. Required.
        :type tenant_action_group_patch: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        tenant_action_group_patch: Union[_models.ActionGroupPatchBody, IO[bytes]],
        **kwargs: Any
    ) -> _models.TenantActionGroupResource:
        """Updates an existing tenant action group's tags. To update other fields use the CreateOrUpdate
        method.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param tenant_action_group_patch: Parameters supplied to the operation. Is either a
         ActionGroupPatchBody type or a IO[bytes] type. Required.
        :type tenant_action_group_patch:
         ~azure.mgmt.monitor.v2023_03_01_preview.models.ActionGroupPatchBody or IO[bytes]
        :return: TenantActionGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-03-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TenantActionGroupResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(tenant_action_group_patch, (IOBase, bytes)):
            _content = tenant_action_group_patch
        else:
            _json = self._serialize.body(tenant_action_group_patch, "ActionGroupPatchBody")

        _request = build_update_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request = _convert_request(_request)
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("TenantActionGroupResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_management_group_id(
        self, management_group_id: str, x_ms_client_tenant_id: str, **kwargs: Any
    ) -> AsyncIterable["_models.TenantActionGroupResource"]:
        """Get a list of all tenant action groups in a management group.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :return: An iterator like instance of either TenantActionGroupResource or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.monitor.v2023_03_01_preview.models.TenantActionGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-03-01-preview")
        )
        cls: ClsType[_models.TenantActionGroupList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_by_management_group_id_request(
                    management_group_id=management_group_id,
                    x_ms_client_tenant_id=x_ms_client_tenant_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request = _convert_request(_request)
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request = _convert_request(_request)
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("TenantActionGroupList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)
