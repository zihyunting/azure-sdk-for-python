# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .._serialization import Deserializer, Serializer
from ._configuration import DataApiClientConfiguration
from .operations import (
    ApiDefinitionsOperations,
    ApiDeploymentsOperations,
    ApiVersionsOperations,
    ApisOperations,
    EnvironmentsOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class DataApiClient:  # pylint: disable=client-accepts-api-version-keyword
    """Data API introduces endpoints to manage your API Center resources.

    :ivar apis: ApisOperations operations
    :vartype apis: azure.apicenter.aio.operations.ApisOperations
    :ivar api_definitions: ApiDefinitionsOperations operations
    :vartype api_definitions: azure.apicenter.aio.operations.ApiDefinitionsOperations
    :ivar api_deployments: ApiDeploymentsOperations operations
    :vartype api_deployments: azure.apicenter.aio.operations.ApiDeploymentsOperations
    :ivar environments: EnvironmentsOperations operations
    :vartype environments: azure.apicenter.aio.operations.EnvironmentsOperations
    :ivar api_versions: ApiVersionsOperations operations
    :vartype api_versions: azure.apicenter.aio.operations.ApiVersionsOperations
    :param service_name: Region-unique API Center service name. Required.
    :type service_name: str
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :keyword api_version: The API version to use for this operation. Default value is
     "2024-02-01-preview". Note that overriding this default value may result in unsupported
     behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(self, service_name: str, credential: "AsyncTokenCredential", **kwargs: Any) -> None:
        _endpoint = "https://{serviceName}.data.azure-apicenter.net"
        self._config = DataApiClientConfiguration(service_name=service_name, credential=credential, **kwargs)
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncPipelineClient = AsyncPipelineClient(base_url=_endpoint, policies=_policies, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.apis = ApisOperations(self._client, self._config, self._serialize, self._deserialize)
        self.api_definitions = ApiDefinitionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.api_deployments = ApiDeploymentsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.environments = EnvironmentsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.api_versions = ApiVersionsOperations(self._client, self._config, self._serialize, self._deserialize)

    def send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "DataApiClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
